<?phpfunction addAction($id){    //return '<a href="#" onclick=edit_record('.$id.')>edit</a> | <a href="#" onclick=delete_record('.$id.')>del</a>';    return '<a href="#" onclick=edit_record('.$id.')>edit</a>';}function redirect($module,$controller,$action,$record){      echo '<script>          window.location = "index.php?module='.$module.'&action=index&controller='.$controller.'&controller_action='.$action.'&record='.$record.'"          </script>';}	function translateToString($data){	$str = implode("','",explode('\r\n',br2nl($data)));	return "'".$str."'";}function concatenateSpace($modulename){	$modulname_final ="";	$module_name_temp = explode(" ",$modulename);	foreach($module_name_temp as $key => $value){		$modulname_final .= $value;	}	return $modulname_final;}function recurse_copy($src,$dst) {     $dir = opendir($src);     @mkdir($dst);     while(false !== ( $file = readdir($dir)) ) {         if (( $file != '.' ) && ( $file != '..' )) {             if ( is_dir($src . '/' . $file) ) {                 recurse_copy($src . '/' . $file,$dst . '/' . $file);             }             else {                 copy($src . '/' . $file,$dst . '/' . $file);             }         }     }     closedir($dir); } function parseHeader($header){        return json_decode(htmlspecialchars_decode($header));   }# $is_label_editable(boolean) : indicates if label1/label2 will be editable function changeToInputType($id,$value,$is_label_editable = false){    if( $is_label_editable == false )        return "<input type='text' name='{$id}' value='{$value}' />";    else        return "<input type='text' name='label_{$id}' value='{$value}' />";}function parseLabelSingle($label){    $label = json_decode(htmlspecialchars_decode($label));    return $label->value1;}function parseLabel($label){    $label = json_decode(htmlspecialchars_decode($label));    $label->condition1 = str_replace('_',' ',$label->condition1);    $label->condition2 = str_replace('_',' ',$label->condition2);        return $label->condition1." ".$label->value1." ".$label->condition2." ".$label->value2;}function parseLabelEditSingle($label,$id){    $label = json_decode(htmlspecialchars_decode($label));    return $label->condition1."<input type ='text' name = 'single_".$id."' value='".$label->value1."' />";}function parseLabelEdit($label,$id){    $label = json_decode(htmlspecialchars_decode($label));    $label1_temp = $label->condition1;    $label2_temp = $label->condition2;    $label->condition1 = str_replace('_',' ',$label->condition1);    $label->condition2 = str_replace('_',' ',$label->condition2);    if( $label2_temp == "above_")        return $label->condition2."<input type ='text' name = 'condition_".$id."_".$label2_temp."' value='".$label->value2."' />";    else        return $label->condition1."<input type ='text' name = 'condition_".$id."_".$label1_temp."' value='".$label->value1."' />".$label->condition2."<input type ='text' name = 'condition_".$id."_".$label2_temp."' value='".$label->value2."' />";}/* HISTORY LOGS */ function getRoleId( $userid ) {        require_once( getcwd().'/include/maxicarelib/User.php' );        $user = new User();        $user_info = $user->getUserRoleByID( $userid );        return $user_info['roleid']; } function arrangeFieldsToBlocks(){	$arranged_data = array();	$pattern_block = '/^block_[0-9]*_name$/';		foreach($_REQUEST as $key => $value){		if(preg_match($pattern_block,$key)){			$block_name_temp = explode('_',$key);			$new_block_name = $block_name_temp[0].'_'.$block_name_temp[1].'_';			$arranged_data[$new_block_name] = array('name'=>$value,'fields'=>array());		}	}		foreach($arranged_data as $key => $value){		$pattern_fields = '/^field_'.$key.'/';		foreach($_REQUEST as $key2 => $value2){			if(preg_match($pattern_fields,$key2)){				$field_name_temp = explode('_',$key2);				$new_field_name = $field_name_temp[0].'_'.$field_name_temp[1].'_'.$field_name_temp[2].'_'.$field_name_temp[3].'_'.$field_name_temp[4];				$arranged_data[$key]['fields'][$new_field_name][$field_name_temp[5]] = $value2;			}		}	}		return $arranged_data;}?>